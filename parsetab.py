
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'startleftPLUSMINUSleftTIMESDIVIDErightUMINUSUPLUSrightPOWERCOMMA DIVIDE EQUALS LPAREN MINUS NAME NUMBER PLUS POWER RPAREN SEMICOLON TIMESstart : statementsstatements : statement\n                  | statement SEMICOLON statementsstatement : NAME EQUALS expression\n                 | NAME LPAREN arglist RPAREN EQUALS expression\n                 | expressionexpression : term\n                  | expression PLUS term\n                  | expression MINUS termterm : term TIMES factor\n            | term DIVIDE factor\n            | factorarglist : expression\n               | arglist COMMA expressionfactor : NUMBERfactor : PLUS factor %prec UPLUS\n               | MINUS factor %prec UMINUSfactor : NAMEfactor : NAME LPAREN arglist RPARENfactor : factor POWER factor %prec POWERfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'NAME':([0,6,8,9,12,13,14,15,16,19,20,23,31,36,38,],[4,18,18,18,4,18,18,18,18,18,18,18,18,18,18,]),'NUMBER':([0,6,8,9,12,13,14,15,16,19,20,23,31,36,38,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'PLUS':([0,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,27,28,29,30,31,32,33,34,35,36,38,39,40,41,],[8,-18,15,8,-7,8,8,-12,-15,8,8,8,8,8,15,-18,8,8,-16,-17,8,15,15,-8,-9,-21,8,-10,-11,-20,-19,8,8,15,-19,15,]),'MINUS':([0,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,27,28,29,30,31,32,33,34,35,36,38,39,40,41,],[9,-18,16,9,-7,9,9,-12,-15,9,9,9,9,9,16,-18,9,9,-16,-17,9,16,16,-8,-9,-21,9,-10,-11,-20,-19,9,9,16,-19,16,]),'LPAREN':([0,4,6,8,9,12,13,14,15,16,18,19,20,23,31,36,38,],[6,14,6,6,6,6,6,6,6,6,31,6,6,6,6,6,6,]),'$end':([1,2,3,4,5,7,10,11,18,21,22,24,25,28,29,30,32,33,34,35,40,41,],[0,-1,-2,-18,-6,-7,-12,-15,-18,-16,-17,-3,-4,-8,-9,-21,-10,-11,-20,-19,-19,-5,]),'SEMICOLON':([3,4,5,7,10,11,18,21,22,25,28,29,30,32,33,34,35,40,41,],[12,-18,-6,-7,-12,-15,-18,-16,-17,-4,-8,-9,-21,-10,-11,-20,-19,-19,-5,]),'EQUALS':([4,35,],[13,38,]),'POWER':([4,10,11,18,21,22,30,32,33,34,35,40,],[-18,23,-15,-18,23,23,-21,23,23,23,-19,-19,]),'TIMES':([4,7,10,11,18,21,22,28,29,30,32,33,34,35,40,],[-18,19,-12,-15,-18,-16,-17,19,19,-21,-10,-11,-20,-19,-19,]),'DIVIDE':([4,7,10,11,18,21,22,28,29,30,32,33,34,35,40,],[-18,20,-12,-15,-18,-16,-17,20,20,-21,-10,-11,-20,-19,-19,]),'RPAREN':([7,10,11,17,18,21,22,26,27,28,29,30,32,33,34,37,39,40,],[-7,-12,-15,30,-18,-16,-17,35,-13,-8,-9,-21,-10,-11,-20,40,-14,-19,]),'COMMA':([7,10,11,18,21,22,26,27,28,29,30,32,33,34,37,39,40,],[-7,-12,-15,-18,-16,-17,36,-13,-8,-9,-21,-10,-11,-20,36,-14,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'statements':([0,12,],[2,24,]),'statement':([0,12,],[3,3,]),'expression':([0,6,12,13,14,31,36,38,],[5,17,5,25,27,27,39,41,]),'term':([0,6,12,13,14,15,16,31,36,38,],[7,7,7,7,7,28,29,7,7,7,]),'factor':([0,6,8,9,12,13,14,15,16,19,20,23,31,36,38,],[10,10,21,22,10,10,10,10,10,32,33,34,10,10,10,]),'arglist':([14,31,],[26,37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> statements','start',1,'p_start','deqatn_parser.py',43),
  ('statements -> statement','statements',1,'p_statements','deqatn_parser.py',47),
  ('statements -> statement SEMICOLON statements','statements',3,'p_statements','deqatn_parser.py',48),
  ('statement -> NAME EQUALS expression','statement',3,'p_statement','deqatn_parser.py',56),
  ('statement -> NAME LPAREN arglist RPAREN EQUALS expression','statement',6,'p_statement','deqatn_parser.py',57),
  ('statement -> expression','statement',1,'p_statement','deqatn_parser.py',58),
  ('expression -> term','expression',1,'p_expression','deqatn_parser.py',86),
  ('expression -> expression PLUS term','expression',3,'p_expression','deqatn_parser.py',87),
  ('expression -> expression MINUS term','expression',3,'p_expression','deqatn_parser.py',88),
  ('term -> term TIMES factor','term',3,'p_term','deqatn_parser.py',98),
  ('term -> term DIVIDE factor','term',3,'p_term','deqatn_parser.py',99),
  ('term -> factor','term',1,'p_term','deqatn_parser.py',100),
  ('arglist -> expression','arglist',1,'p_arglist','deqatn_parser.py',109),
  ('arglist -> arglist COMMA expression','arglist',3,'p_arglist','deqatn_parser.py',110),
  ('factor -> NUMBER','factor',1,'p_factor_num','deqatn_parser.py',117),
  ('factor -> PLUS factor','factor',2,'p_factor_unary','deqatn_parser.py',122),
  ('factor -> MINUS factor','factor',2,'p_factor_unary','deqatn_parser.py',123),
  ('factor -> NAME','factor',1,'p_factor_name','deqatn_parser.py',130),
  ('factor -> NAME LPAREN arglist RPAREN','factor',4,'p_factor_function_call','deqatn_parser.py',140),
  ('factor -> factor POWER factor','factor',3,'p_factor_power','deqatn_parser.py',156),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','deqatn_parser.py',160),
]
